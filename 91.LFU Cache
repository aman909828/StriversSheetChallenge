from os import *
from sys import *
from collections import *
from math import *



class LFUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self._items = defaultdict(int)
        self._freqs = defaultdict(OrderedDict)  
        self._minFreq = 0 

    def get(self, key: int) -> int:
        if key not in self._items:
            return -1
        return self._update_freq(key)

    def put(self, key: int, value: int) -> None:
        if not self.capacity:
            return
        if key in self._items:
            self._update_freq(key, value)
        else:
            if len(self._items) == self.capacity:  
                self._items.pop(
                    self._freqs[self._minFreq].popitem(last=False)[0])
            self._minFreq = 1
            self._items[key] = 1
            self._freqs[1][key] = value
    
    def _update_freq(self, key: int, value: int = None) -> int:
        f = self._items[key]
        v = self._freqs[f].pop(key)  
        if value is not None:  
            v = value
        self._freqs[f + 1][key] = v  
        self._items[key] += 1  
        if self._minFreq == f and not self._freqs[f]:
            self._minFreq += 1
        return v

